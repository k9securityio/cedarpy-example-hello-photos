service: hello-photos
frameworkVersion: '3'

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  build_branch: ${env:BUILD_BRANCH, 'unknown'}
  runtime: python3.9
  iam:
    role: HelloPhotosAppRole
  environment:
    STAGE: ${self:provider.stage}

custom:
  pythonRequirements:
    # docs: https://www.serverless.com/plugins/serverless-python-requirements
    pythonBin: python3
    dockerizePip: non-linux
    dockerSsh: true
    slim: true
  prune:
    automatic: true
    number: 3

  times_in_seconds:
    - &15s 15
    - &1m 60


# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  # https://www.serverless.com/framework/docs/providers/aws/guide/packaging
  patterns:
    - '*.py'
    - '!.git/**'
    - '!.idea/**'
    - '!*.iml'
    - '!Makefile'
    - '!__pycache__'
    - '!**/__pycache__'
    - '!node_modules/**'
    - '!package*.json'
    - '!venv*/**'
    - '!dist/**'
    - '!tests/**'

functions:
  hello_cedarpy:
    handler: handler.hello_cedarpy
    description: ${self:service} - check if cedarpy is working

  authorizer:
    handler: authorizer.authorize
    description: ${self:service} - API authorizer

    # TODO: add custom CFn resource policy that allows API gateway to invoke, similar to:
    # {
    #  "Version": "2012-10-17",
    #  "Id": "default",
    #  "Statement": [
    #    {
    #      "Sid": "a3febc16-037c-4ee2-bc78-4af89abc4908",
    #      "Effect": "Allow",
    #      "Principal": {
    #        "Service": "apigateway.amazonaws.com"
    #      },
    #      "Action": "lambda:InvokeFunction",
    #      "Resource": "arn:aws:lambda:us-east-1:139710491120:function:hello-photos-dev-main-authorizer",
    #      "Condition": {
    #        "ArnLike": {
    #          "AWS:SourceArn": "arn:aws:execute-api:us-east-1:139710491120:vr3d61pcqe/authorizers/9epkxk"
    #        }
    #      }
    #    }
    #  ]
    #}

resources:
  Description: "hello-photos deployment for stage: ${self:provider.stage}, branch: ${self:provider.build_branch}"
  Resources:
    HelloPhotosAppRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: hello-photos-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - apigateway.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: ReadAppData
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource: 'arn:aws:s3:::hello-photos-bucket-${self:provider.stage}*/*'

    PhotosBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: hello-photos-bucket-${self:provider.stage}
    # adapted from https://cloudncode.blog/2017/08/08/tidbit-api-gateway-as-a-s3-proxy-cloudformation-script-with-serverless-framework/
    S3ProxyApi:
      Type: "AWS::ApiGateway::RestApi"
      Properties:
        BinaryMediaTypes: # add or subtract MIME types here
          - image/png
          - image/jpg
          - image/gif
          - image/x-icon
          - application/octet-stream
        Description: API for hello-photos ${opt:stage}
        FailOnWarnings: false
        Name: ${self:provider.stage}-hello-photos-api

    S3ProxyAuthorizer: # custom authorizer for the API gateway for accessing the bucket
      Type: "AWS::ApiGateway::Authorizer"
      Properties:
        AuthorizerResultTtlInSeconds: 5
        # configure Authorizer *URI* (not Arn):
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html#cfn-apigateway-authorizer-authorizeruri
        AuthorizerUri: { "Fn::Join" : [ "",
          [ "arn:aws:apigateway:us-east-1:lambda:path//2015-03-31/functions/",
            { "Fn::GetAtt" : [ "AuthorizerLambdaFunction", "Arn" ] },
            "/invocations"
          ]
        ]
        }
        IdentitySource: method.request.header.Authorization
        IdentityValidationExpression: ^Bearer.+
        Name: CommonAuthorizer
        RestApiId:
          Ref: "S3ProxyApi"
        Type: TOKEN

    ApiResourceUsers:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          Fn::GetAtt:
            - "S3ProxyApi"
            - "RootResourceId"
        PathPart: "users"
        RestApiId:
          Ref: "S3ProxyApi"
    ApiResourceUserId:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          Fn::GetAtt:
            - "ApiResourceUsers"
            - "ResourceId"
        PathPart: "{userId}"
        RestApiId:
          Ref: "S3ProxyApi"
    ApiResourceUserPhotos:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          Fn::GetAtt:
            - "ApiResourceUserId"
            - "ResourceId"
        PathPart: "photos"
        RestApiId:
          Ref: "S3ProxyApi"
    ApiResourceUserPhotoId:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          Fn::GetAtt:
            - "ApiResourceUserPhotos"
            - "ResourceId"
        PathPart: "{photoId}"
        RestApiId:
          Ref: "S3ProxyApi"

    s3ProxyGetMethod:
      Type: "AWS::ApiGateway::Method"
      Properties:
        ApiKeyRequired: false
#        AuthorizationType: NONE
        AuthorizationType: CUSTOM
        AuthorizerId:
          Ref: S3ProxyAuthorizer
        HttpMethod: GET
        RequestParameters:
          method.request.header.Content-Disposition: false
          method.request.header.Content-Type: false
          method.request.path.userId: true
          method.request.path.photoId: true
        Integration:
          Type: AWS
          Uri: arn:aws:apigateway:us-east-1:s3:path/hello-photos-bucket-${self:provider.stage}/users/{userId}/photos/{photoId}
          Credentials: !GetAtt HelloPhotosAppRole.Arn 
          IntegrationHttpMethod: GET
          IntegrationResponses:
              - StatusCode: 200
                ResponseParameters:
                  method.response.header.Content-Type: integration.response.header.Content-Type
                  method.response.header.Content-Disposition: integration.response.header.Content-Disposition
              - StatusCode: 400
                SelectionPattern: "400"
                ResponseParameters:
                  method.response.header.Content-Type: integration.response.header.Content-Type
                  method.response.header.Content-Disposition: integration.response.header.Content-Disposition
              - StatusCode: 404
                SelectionPattern: "404"
                ResponseParameters:
                  method.response.header.Content-Type: integration.response.header.Content-Type
                  method.response.header.Content-Disposition: integration.response.header.Content-Disposition
              - StatusCode: 500
                SelectionPattern: '5\d{2}'
                ResponseParameters:
                  method.response.header.Content-Type: integration.response.header.Content-Type
                  method.response.header.Content-Disposition: integration.response.header.Content-Disposition
          PassthroughBehavior: WHEN_NO_MATCH
          RequestParameters:
            integration.request.header.Content-Disposition: method.request.header.Content-Disposition
            integration.request.header.Content-Type: method.request.header.Content-Type
            integration.request.path.userId: method.request.path.userId
            integration.request.path.photoId: method.request.path.photoId
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
          - StatusCode: 400
            ResponseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
          - StatusCode: 404
            ResponseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
          - StatusCode: 500
            ResponseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
        ResourceId:
          Fn::GetAtt:
            - "ApiResourceUserPhotoId"
            - "ResourceId"
        RestApiId:
          Ref: "S3ProxyApi"
    ApiGatewayDeployment:
      Type: 'AWS::ApiGateway::Deployment'
      Properties:
        RestApiId:
          Ref: "S3ProxyApi"
        StageName: ${opt:stage}
      DependsOn:
        - s3ProxyGetMethod


plugins:
  - serverless-python-requirements
  - serverless-prune-plugin

